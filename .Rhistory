}
}
}
x <- i + 1
}
TPcand_index <- djia_core %>% filter(TPcand == 1) %>% select(ObsNo) %>% unlist() %>% as.numeric()
djia_core$PosCount_TPcand   <- NA
djia_core$NegCount_TPcand   <- NA
djia_core$ShiftCount_TPcand <- NA
x <- 2
y <- 0
for(i in TPcand_index){
y           <- y + 1
posCount    <- 0
negCount    <- 0
shiftCount  <- 0
for(j in x:i){
if(djia_core$lReturn_djia[j] >= 0){
posCount <- posCount + 1
djia_core$PosCount_TPcand[j] <- posCount
djia_core$NegCount_TPcand[j] <- negCount
if((j >=3) && (djia_core$PosRet_TPcand[j-1] < 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >=3) && (djia_core$PosRet_TPcand[j-1] >= 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
else if(djia_core$lReturn_djia[j] < 0){
negCount <- negCount + 1
djia_core$NegCount_TPcand[j] <- negCount
djia_core$PosCount_TPcand[j] <- posCount
if((j >=3) && (djia_core$PosRet_TPcand[j-1] >= 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >=3) && (djia_core$PosRet_TPcand[j-1] < 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
}
x <- i + 1
}
TPcand_index <- djia_core %>% filter(TPcand == 1) %>% select(ObsNo) %>% unlist() %>% as.numeric()
djia_core$PosCount_TPcand   <- NA
djia_core$NegCount_TPcand   <- NA
djia_core$ShiftCount_TPcand <- NA
x <- 2
y <- 0
for(i in TPcand_index){
y           <- y + 1
posCount    <- 0
negCount    <- 0
shiftCount  <- 0
for(j in x:i){
if(djia_core$lReturn_djia[j] >= 0){
posCount <- posCount + 1
djia_core$PosCount_TPcand[j] <- posCount
djia_core$NegCount_TPcand[j] <- negCount
if((j >=3) & (djia_core$PosRet_TPcand[j-1] < 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >=3) & (djia_core$PosRet_TPcand[j-1] >= 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
else if(djia_core$lReturn_djia[j] < 0){
negCount <- negCount + 1
djia_core$NegCount_TPcand[j] <- negCount
djia_core$PosCount_TPcand[j] <- posCount
if((j >=3) & (djia_core$PosRet_TPcand[j-1] >= 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >=3) & (djia_core$PosRet_TPcand[j-1] < 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
}
x <- i + 1
}
TPcand_index <- djia_core %>% filter(TPcand == 1) %>% select(ObsNo) %>% unlist() %>% as.numeric()
djia_core$PosCount_TPcand   <- NA
djia_core$NegCount_TPcand   <- NA
djia_core$ShiftCount_TPcand <- NA
x <- 2
y <- 0
for(i in TPcand_index){
y           <- y + 1
posCount    <- 0
negCount    <- 0
shiftCount  <- 0
for(j in x:i){
if(djia_core$lReturn_djia[j] >= 0){
posCount <- posCount + 1
djia_core$PosCount_TPcand[j] <- posCount
djia_core$NegCount_TPcand[j] <- negCount
if((j >=3) & (djia_core$lReturn_djia[j-1] < 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >=3) & (djia_core$lReturn_djia[j-1] >= 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
else if(djia_core$lReturn_djia[j] < 0){
negCount <- negCount + 1
djia_core$NegCount_TPcand[j] <- negCount
djia_core$PosCount_TPcand[j] <- posCount
if((j >=3) & (djia_core$lReturn_djia[j-1] >= 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >=3) & (djia_core$lReturn_djia[j-1] < 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
}
x <- i + 1
}
View(djia_core)
source("mung.R")
# 2. Reading data ------------------------------------------
djia_core <- data.frame(read_excel("data/DJIA_PT.xlsx"))
spx500    <- data.frame(read_excel("data/SPX500_last_volume_daily.xlsx"))
cpi       <- data.frame(read_excel("data/CPI_yoy_mthly.xlsx"))
dvds      <- data.frame(read_excel("data/DIVIDENTS.xlsx"))
fdtr      <- data.frame(read_excel("data/FDTRMID.xlsx"))
ipmg      <- data.frame(read_excel("data/IPMGCHNG_mom_sa.xlsx"))
usgg10    <- data.frame(read_excel("data/USGG10yr.xlsx"))
usur      <- data.frame(read_excel("data/USURTOT_mthly.xlsx"))
colnames(spx500)  <- c("Date", "Price_spx", "Volume_spx")
colnames(cpi)     <- c("Date", "CPI")
colnames(dvds)    <- c("Date", "Net_dvds", "Gross_dvds" )
colnames(fdtr)    <- c("Date", "FDTR")
colnames(ipmg)    <- c("Date", "IPMG")
colnames(usgg10)  <- c("Date", "USGG10")
colnames(usur)    <- c("Date", "USUR")
spx500$Volume_spx[spx500$Volume_spx == 0] <- NA
# 3. Merging data -----------------------------------------
# Merging daily data ----
# SP500 ----
scanner(djia_core, spx500)
djia_core <- merge(djia_core, spx500, by = "Date", all.x = TRUE)
length(which(is.na(djia_core$Price_spx)))
#filling missing cells from "Price.spx" and "Volume.spx" columns with the average value of their closest neighbor cells
djia_core[which(is.na(djia_core$Price_spx)),c("Price_spx", "Volume_spx")] <-
(djia_core[which(is.na(djia_core$Price_spx))-1, c("Price_spx", "Volume_spx")] +
djia_core[which(is.na(djia_core$Price_spx))+1, c("Price_spx", "Volume_spx")])/2
length(which(is.na(djia_core$Price_spx)))
# FDTR ----
scanner(djia_core, fdtr)
djia_core <- merge(djia_core, fdtr, by = "Date", all.x = TRUE)
#tail(which(is.na(djia_core$FDTR)),200)
# DVDS ----
scanner(djia_core, dvds)
djia_core <- merge(djia_core, dvds, by = "Date", all.x = TRUE)
djia_core$Net_dvds <- NULL
length(which(is.na(djia_core$Gross_dvds)))
#filling missing "solitary" cells from "Gross_dvds" column with the average value of its closest neighbor cells
djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)],"Gross_dvds"] <-
(djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)]-1,"Gross_dvds"] +
djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)]+1, "Gross_dvds"])/2
length(which(is.na(djia_core$Gross_dvds)))
# USGG10 ----
scanner(djia_core, usgg10)
djia_core <- merge(djia_core, usgg10, by = "Date", all.x = TRUE)
length(which(is.na(djia_core$USGG10))[-(1:4108)])
#filling missing "solitary" cells from "USGG10" column with the average value of its closest neighbor cells
djia_core[which(is.na(djia_core$USGG10))[-(1:4108)],"USGG10"] <-
(djia_core[which(is.na(djia_core$USGG10))[-(1:4108)]-1,"USGG10"] +
djia_core[which(is.na(djia_core$USGG10))[-(1:4108)]+1, "USGG10"])/2
length(which(is.na(djia_core$USGG10))[-(1:4108)])
#filling the rest of missing cells with first previous available value
for(i in which(is.na(djia_core$USGG10))[-(1:4108)]){
djia_core[i,"USGG10"] <- djia_core[i-1,"USGG10"]
}
rm(i)
length(which(is.na(djia_core$USGG10))[-(1:4108)])
# Merging monthly data ----
# CPI ----
djia_core     <- merger(djia_core, cpi)
djia_core$CPI <- filler(djia_core$CPI)
djia_core$CPI  <- monthlyTrimmer(djia_core, cpi)
# USUR ----
djia_core       <- merger(djia_core, usur)
djia_core$USUR  <- filler(djia_core$USUR)
djia_core$USUR  <- monthlyTrimmer(djia_core, usur)
# IPMG ----
djia_core     <- merger(djia_core, ipmg)
djia_core$IPMG <- filler(djia_core$IPMG)
djia_core$IPMG  <- monthlyTrimmer(djia_core, ipmg)
rownames(djia_core) <- 1:nrow(djia_core)
# 4. Low level features -----------------------------------------------------
# Logarithmic returns ----
djia_core$lReturn_djia  <- round(ROC(djia_core$Price)*100, 2)
djia_core$lReturn_spx   <- round(ROC(djia_core$Price_spx)*100, 2)
cor(djia_core$lReturn_djia[-1], djia_core$lReturn_spx[-1])
TPcand_index <- djia_core %>% filter(TPcand == 1) %>% select(ObsNo) %>% unlist() %>% as.numeric()
djia_core$PosCount_TPcand   <- NA
djia_core$NegCount_TPcand   <- NA
djia_core$ShiftCount_TPcand <- NA
x <- 2
y <- 0
for(i in TPcand_index){
y           <- y + 1
posCount    <- 0
negCount    <- 0
shiftCount  <- 0
for(j in x:i){
if(djia_core$lReturn_djia[j] >= 0){
posCount <- posCount + 1
djia_core$PosCount_TPcand[j] <- posCount
djia_core$NegCount_TPcand[j] <- negCount
if((j >= x+1) & (djia_core$lReturn_djia[j-1] < 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >= x+1) & (djia_core$lReturn_djia[j-1] >= 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
else if(djia_core$lReturn_djia[j] < 0){
negCount <- negCount + 1
djia_core$NegCount_TPcand[j] <- negCount
djia_core$PosCount_TPcand[j] <- posCount
if((j >= x+1) & (djia_core$lReturn_djia[j-1] >= 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >= x+1) & (djia_core$lReturn_djia[j-1] < 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
}
x <- i + 1
}
source("mung.R")
# 2. Reading data ------------------------------------------
djia_core <- data.frame(read_excel("data/DJIA_PT.xlsx"))
spx500    <- data.frame(read_excel("data/SPX500_last_volume_daily.xlsx"))
cpi       <- data.frame(read_excel("data/CPI_yoy_mthly.xlsx"))
dvds      <- data.frame(read_excel("data/DIVIDENTS.xlsx"))
fdtr      <- data.frame(read_excel("data/FDTRMID.xlsx"))
ipmg      <- data.frame(read_excel("data/IPMGCHNG_mom_sa.xlsx"))
usgg10    <- data.frame(read_excel("data/USGG10yr.xlsx"))
usur      <- data.frame(read_excel("data/USURTOT_mthly.xlsx"))
colnames(spx500)  <- c("Date", "Price_spx", "Volume_spx")
colnames(cpi)     <- c("Date", "CPI")
colnames(dvds)    <- c("Date", "Net_dvds", "Gross_dvds" )
colnames(fdtr)    <- c("Date", "FDTR")
colnames(ipmg)    <- c("Date", "IPMG")
colnames(usgg10)  <- c("Date", "USGG10")
colnames(usur)    <- c("Date", "USUR")
spx500$Volume_spx[spx500$Volume_spx == 0] <- NA
# 3. Merging data -----------------------------------------
# Merging daily data ----
# SP500 ----
scanner(djia_core, spx500)
djia_core <- merge(djia_core, spx500, by = "Date", all.x = TRUE)
length(which(is.na(djia_core$Price_spx)))
#filling missing cells from "Price.spx" and "Volume.spx" columns with the average value of their closest neighbor cells
djia_core[which(is.na(djia_core$Price_spx)),c("Price_spx", "Volume_spx")] <-
(djia_core[which(is.na(djia_core$Price_spx))-1, c("Price_spx", "Volume_spx")] +
djia_core[which(is.na(djia_core$Price_spx))+1, c("Price_spx", "Volume_spx")])/2
length(which(is.na(djia_core$Price_spx)))
# FDTR ----
scanner(djia_core, fdtr)
djia_core <- merge(djia_core, fdtr, by = "Date", all.x = TRUE)
#tail(which(is.na(djia_core$FDTR)),200)
# DVDS ----
scanner(djia_core, dvds)
djia_core <- merge(djia_core, dvds, by = "Date", all.x = TRUE)
djia_core$Net_dvds <- NULL
length(which(is.na(djia_core$Gross_dvds)))
#filling missing "solitary" cells from "Gross_dvds" column with the average value of its closest neighbor cells
djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)],"Gross_dvds"] <-
(djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)]-1,"Gross_dvds"] +
djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)]+1, "Gross_dvds"])/2
length(which(is.na(djia_core$Gross_dvds)))
# USGG10 ----
scanner(djia_core, usgg10)
djia_core <- merge(djia_core, usgg10, by = "Date", all.x = TRUE)
length(which(is.na(djia_core$USGG10))[-(1:4108)])
#filling missing "solitary" cells from "USGG10" column with the average value of its closest neighbor cells
djia_core[which(is.na(djia_core$USGG10))[-(1:4108)],"USGG10"] <-
(djia_core[which(is.na(djia_core$USGG10))[-(1:4108)]-1,"USGG10"] +
djia_core[which(is.na(djia_core$USGG10))[-(1:4108)]+1, "USGG10"])/2
length(which(is.na(djia_core$USGG10))[-(1:4108)])
#filling the rest of missing cells with first previous available value
for(i in which(is.na(djia_core$USGG10))[-(1:4108)]){
djia_core[i,"USGG10"] <- djia_core[i-1,"USGG10"]
}
rm(i)
length(which(is.na(djia_core$USGG10))[-(1:4108)])
# Merging monthly data ----
# CPI ----
djia_core     <- merger(djia_core, cpi)
djia_core$CPI <- filler(djia_core$CPI)
djia_core$CPI  <- monthlyTrimmer(djia_core, cpi)
# USUR ----
djia_core       <- merger(djia_core, usur)
djia_core$USUR  <- filler(djia_core$USUR)
djia_core$USUR  <- monthlyTrimmer(djia_core, usur)
# IPMG ----
djia_core     <- merger(djia_core, ipmg)
djia_core$IPMG <- filler(djia_core$IPMG)
djia_core$IPMG  <- monthlyTrimmer(djia_core, ipmg)
rownames(djia_core) <- 1:nrow(djia_core)
# 4. Low level features -----------------------------------------------------
# Logarithmic returns ----
djia_core$lReturn_djia  <- round(ROC(djia_core$Price)*100, 2)
djia_core$lReturn_spx   <- round(ROC(djia_core$Price_spx)*100, 2)
cor(djia_core$lReturn_djia[-1], djia_core$lReturn_spx[-1])
TPcand_index <- djia_core %>% filter(TPcand == 1) %>% select(ObsNo) %>% unlist() %>% as.numeric()
djia_core$PosCount_TPcand   <- NA
djia_core$NegCount_TPcand   <- NA
djia_core$ShiftCount_TPcand <- NA
djia_core$PosInaRow_TPcand  <- NA
djia_core$NegInaRow_TPcand  <- NA
x <- 2
y <- 0
for(i in TPcand_index){
y           <- y + 1
posCount    <- 0
negCount    <- 0
shiftCount  <- 0
posInaRow   <- 0
negInaRow   <- 0
for(j in x:i){
if(djia_core$lReturn_djia[j] >= 0){
posCount  <- posCount + 1
posInaRow <- posInaRow + 1
negInaRow <- 0
djia_core$PosCount_TPcand[j]  <- posCount
djia_core$NegCount_TPcand[j]  <- negCount
djia_core$PosInaRow_TPcand[j] <- posInaRow
djia_core$NegInaRow_TPcand[j] <- negInaRow
if((j >= x+1) & (djia_core$lReturn_djia[j-1] < 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >= x+1) & (djia_core$lReturn_djia[j-1] >= 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
else if(djia_core$lReturn_djia[j] < 0){
negCount  <- negCount + 1
negInaRow <- negInaRow + 1
posInaRow <- 0
djia_core$NegCount_TPcand[j]  <- negCount
djia_core$PosCount_TPcand[j]  <- posCount
djia_core$PosInaRow_TPcand[j] <- posInaRow
djia_core$NegInaRow_TPcand[j] <- negInaRow
if((j >= x+1) & (djia_core$lReturn_djia[j-1] >= 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >= x+1) & (djia_core$lReturn_djia[j-1] < 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
}
x <- i + 1
}
as.numeric(djia_core$PosInaRow_TPcand)
as.numeric(djia_core$PosInaRow_TPcand)[-1]
as.numeric(djia_core$PosInaRow_TPcand)[2:197]
which(as.numeric(djia_core$PosInaRow_TPcand)[2:197] == 0)
which(as.numeric(djia_core$PosInaRow_TPcand)[2:197] != 0)
max(as.numeric(djia_core$PosInaRow_TPcand)[2:197])
as.numeric(djia_core$PosInaRow_TPcand)[2:197]
as.character(djia_core$PosInaRow_TPcand)[2:197]
as.numeric(djia_core$PosInaRow_TPcand)[2:197]
tmp <- as.numeric(djia_core$PosInaRow_TPcand)[2:197]
tmp
tmp <- tmp == 0
tmp
tmp <- as.numeric(djia_core$PosInaRow_TPcand)[2:197]
tmp <- tmp[tmp != 0]
tmp
source("mung.R")
# 2. Reading data ------------------------------------------
djia_core <- data.frame(read_excel("data/DJIA_PT.xlsx"))
spx500    <- data.frame(read_excel("data/SPX500_last_volume_daily.xlsx"))
cpi       <- data.frame(read_excel("data/CPI_yoy_mthly.xlsx"))
dvds      <- data.frame(read_excel("data/DIVIDENTS.xlsx"))
fdtr      <- data.frame(read_excel("data/FDTRMID.xlsx"))
ipmg      <- data.frame(read_excel("data/IPMGCHNG_mom_sa.xlsx"))
usgg10    <- data.frame(read_excel("data/USGG10yr.xlsx"))
usur      <- data.frame(read_excel("data/USURTOT_mthly.xlsx"))
colnames(spx500)  <- c("Date", "Price_spx", "Volume_spx")
colnames(cpi)     <- c("Date", "CPI")
colnames(dvds)    <- c("Date", "Net_dvds", "Gross_dvds" )
colnames(fdtr)    <- c("Date", "FDTR")
colnames(ipmg)    <- c("Date", "IPMG")
colnames(usgg10)  <- c("Date", "USGG10")
colnames(usur)    <- c("Date", "USUR")
spx500$Volume_spx[spx500$Volume_spx == 0] <- NA
# 3. Merging data -----------------------------------------
# Merging daily data ----
# SP500 ----
scanner(djia_core, spx500)
djia_core <- merge(djia_core, spx500, by = "Date", all.x = TRUE)
length(which(is.na(djia_core$Price_spx)))
#filling missing cells from "Price.spx" and "Volume.spx" columns with the average value of their closest neighbor cells
djia_core[which(is.na(djia_core$Price_spx)),c("Price_spx", "Volume_spx")] <-
(djia_core[which(is.na(djia_core$Price_spx))-1, c("Price_spx", "Volume_spx")] +
djia_core[which(is.na(djia_core$Price_spx))+1, c("Price_spx", "Volume_spx")])/2
length(which(is.na(djia_core$Price_spx)))
# FDTR ----
scanner(djia_core, fdtr)
djia_core <- merge(djia_core, fdtr, by = "Date", all.x = TRUE)
#tail(which(is.na(djia_core$FDTR)),200)
# DVDS ----
scanner(djia_core, dvds)
djia_core <- merge(djia_core, dvds, by = "Date", all.x = TRUE)
djia_core$Net_dvds <- NULL
length(which(is.na(djia_core$Gross_dvds)))
#filling missing "solitary" cells from "Gross_dvds" column with the average value of its closest neighbor cells
djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)],"Gross_dvds"] <-
(djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)]-1,"Gross_dvds"] +
djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)]+1, "Gross_dvds"])/2
length(which(is.na(djia_core$Gross_dvds)))
# USGG10 ----
scanner(djia_core, usgg10)
djia_core <- merge(djia_core, usgg10, by = "Date", all.x = TRUE)
length(which(is.na(djia_core$USGG10))[-(1:4108)])
#filling missing "solitary" cells from "USGG10" column with the average value of its closest neighbor cells
djia_core[which(is.na(djia_core$USGG10))[-(1:4108)],"USGG10"] <-
(djia_core[which(is.na(djia_core$USGG10))[-(1:4108)]-1,"USGG10"] +
djia_core[which(is.na(djia_core$USGG10))[-(1:4108)]+1, "USGG10"])/2
length(which(is.na(djia_core$USGG10))[-(1:4108)])
#filling the rest of missing cells with first previous available value
for(i in which(is.na(djia_core$USGG10))[-(1:4108)]){
djia_core[i,"USGG10"] <- djia_core[i-1,"USGG10"]
}
rm(i)
length(which(is.na(djia_core$USGG10))[-(1:4108)])
# Merging monthly data ----
# CPI ----
djia_core     <- merger(djia_core, cpi)
djia_core$CPI <- filler(djia_core$CPI)
djia_core$CPI  <- monthlyTrimmer(djia_core, cpi)
# USUR ----
djia_core       <- merger(djia_core, usur)
djia_core$USUR  <- filler(djia_core$USUR)
djia_core$USUR  <- monthlyTrimmer(djia_core, usur)
# IPMG ----
djia_core     <- merger(djia_core, ipmg)
djia_core$IPMG <- filler(djia_core$IPMG)
djia_core$IPMG  <- monthlyTrimmer(djia_core, ipmg)
rownames(djia_core) <- 1:nrow(djia_core)
# 4. Low level features -----------------------------------------------------
# Logarithmic returns ----
djia_core$lReturn_djia  <- round(ROC(djia_core$Price)*100, 2)
djia_core$lReturn_spx   <- round(ROC(djia_core$Price_spx)*100, 2)
cor(djia_core$lReturn_djia[-1], djia_core$lReturn_spx[-1])
TPcand_index <- djia_core %>% filter(TPcand == 1) %>% select(ObsNo) %>% unlist() %>% as.numeric()
djia_core$PosCount_TPcand   <- NA
djia_core$NegCount_TPcand   <- NA
djia_core$ShiftCount_TPcand <- NA
djia_core$PosInaRow_TPcand  <- NA
djia_core$NegInaRow_TPcand  <- NA
x <- 2
y <- 0
for(i in TPcand_index){
y           <- y + 1
posCount    <- 0
negCount    <- 0
shiftCount  <- 0
posInaRow   <- 0
negInaRow   <- 0
for(j in x:i){
if(djia_core$lReturn_djia[j] >= 0){
posCount  <- posCount + 1
posInaRow <- posInaRow + 1
negInaRow <- 0
djia_core$PosCount_TPcand[j]  <- posCount
djia_core$NegCount_TPcand[j]  <- negCount
djia_core$PosInaRow_TPcand[j] <- posInaRow
djia_core$NegInaRow_TPcand[j] <- negInaRow
if((j >= x+1) & (djia_core$lReturn_djia[j-1] < 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >= x+1) & (djia_core$lReturn_djia[j-1] >= 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
else if(djia_core$lReturn_djia[j] < 0){
negCount  <- negCount + 1
negInaRow <- negInaRow + 1
posInaRow <- 0
djia_core$NegCount_TPcand[j]  <- negCount
djia_core$PosCount_TPcand[j]  <- posCount
djia_core$PosInaRow_TPcand[j] <- posInaRow
djia_core$NegInaRow_TPcand[j] <- negInaRow
if((j >= x+1) & (djia_core$lReturn_djia[j-1] >= 0)){
shiftCount <- shiftCount + 1
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
else if((j >= x+1) & (djia_core$lReturn_djia[j-1] < 0)){
djia_core$ShiftCount_TPcand[j] <- shiftCount
}
}
}
x <- i + 1
}
View(djia_core)
