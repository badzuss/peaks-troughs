gauge_SDTcv <- slot(auc2, 'y.values')
print(paste("Area under the curve for subset with all predictors TRAIN:", gauge_SDTcv))
source("mung.R")
# 2. Reading data ------------------------------------------
djia_core <- data.frame(read_excel("data/DJIA_PT.xlsx"))
spx500    <- data.frame(read_excel("data/SPX500_last_volume_daily.xlsx"))
cpi       <- data.frame(read_excel("data/CPI_yoy_mthly.xlsx"))
dvds      <- data.frame(read_excel("data/DIVIDENTS.xlsx"))
fdtr      <- data.frame(read_excel("data/FDTRMID.xlsx"))
ipmg      <- data.frame(read_excel("data/IPMGCHNG_mom_sa.xlsx"))
usgg10    <- data.frame(read_excel("data/USGG10yr.xlsx"))
usur      <- data.frame(read_excel("data/USURTOT_mthly.xlsx"))
colnames(spx500)  <- c("Date", "Price_spx", "Volume_spx")
colnames(cpi)     <- c("Date", "CPI")
colnames(dvds)    <- c("Date", "Net_dvds", "Gross_dvds" )
colnames(fdtr)    <- c("Date", "FDTR")
colnames(ipmg)    <- c("Date", "IPMG")
colnames(usgg10)  <- c("Date", "USGG10")
colnames(usur)    <- c("Date", "USUR")
spx500$Volume_spx[spx500$Volume_spx == 0] <- NA
# 3. Merging data -----------------------------------------
# Merging daily data ----
# SP500 ----
scanner(djia_core, spx500)
djia_core <- merge(djia_core, spx500, by = "Date", all.x = TRUE)
length(which(is.na(djia_core$Price_spx)))
#filling missing cells from "Price.spx" and "Volume.spx" columns with the average value of their closest neighbor cells
djia_core[which(is.na(djia_core$Price_spx)),c("Price_spx", "Volume_spx")] <-
(djia_core[which(is.na(djia_core$Price_spx))-1, c("Price_spx", "Volume_spx")] +
djia_core[which(is.na(djia_core$Price_spx))+1, c("Price_spx", "Volume_spx")])/2
length(which(is.na(djia_core$Price_spx)))
# FDTR ----
scanner(djia_core, fdtr)
djia_core <- merge(djia_core, fdtr, by = "Date", all.x = TRUE)
#tail(which(is.na(djia_core$FDTR)),200)
# DVDS ----
scanner(djia_core, dvds)
djia_core <- merge(djia_core, dvds, by = "Date", all.x = TRUE)
djia_core$Net_dvds <- NULL
length(which(is.na(djia_core$Gross_dvds)))
#filling missing "solitary" cells from "Gross_dvds" column with the average value of its closest neighbor cells
djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)],"Gross_dvds"] <-
(djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)]-1,"Gross_dvds"] +
djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)]+1, "Gross_dvds"])/2
length(which(is.na(djia_core$Gross_dvds)))
# USGG10 ----
scanner(djia_core, usgg10)
djia_core <- merge(djia_core, usgg10, by = "Date", all.x = TRUE)
length(which(is.na(djia_core$USGG10))[-(1:4108)])
#filling missing "solitary" cells from "USGG10" column with the average value of its closest neighbor cells
djia_core[which(is.na(djia_core$USGG10))[-(1:4108)],"USGG10"] <-
(djia_core[which(is.na(djia_core$USGG10))[-(1:4108)]-1,"USGG10"] +
djia_core[which(is.na(djia_core$USGG10))[-(1:4108)]+1, "USGG10"])/2
length(which(is.na(djia_core$USGG10))[-(1:4108)])
#filling the rest of missing cells with first previous available value
for(i in which(is.na(djia_core$USGG10))[-(1:4108)]){
djia_core[i,"USGG10"] <- djia_core[i-1,"USGG10"]
}
rm(i)
length(which(is.na(djia_core$USGG10))[-(1:4108)])
# Merging monthly data ----
# CPI ----
djia_core     <- merger(djia_core, cpi)
djia_core$CPI <- filler(djia_core$CPI)
djia_core$CPI  <- monthlyTrimmer(djia_core, cpi)
# USUR ----
djia_core       <- merger(djia_core, usur)
djia_core$USUR  <- filler(djia_core$USUR)
djia_core$USUR  <- monthlyTrimmer(djia_core, usur)
# IPMG ----
djia_core     <- merger(djia_core, ipmg)
djia_core$IPMG <- filler(djia_core$IPMG)
djia_core$IPMG  <- monthlyTrimmer(djia_core, ipmg)
rownames(djia_core) <- 1:nrow(djia_core)
# 4. Low level features -----------------------------------------------------
# Logarithmic returns ----
djia_core$lReturn_djia  <- round(ROC(djia_core$Price), 6)
djia_core$lReturn_spx   <- round(ROC(djia_core$Price_spx), 6)
cor(djia_core$lReturn_djia[-1], djia_core$lReturn_spx[-1])
# Rate of chance of trading volume ----
djia_core$ROC_vol_spx   <- round(ROC(djia_core$Volume_spx), 6)
# Volatility ----
noSessions <- as.numeric(table(year(djia_core$Date)))
avgNoSessions <- round(mean(noSessions[2:length(noSessions)]))
djia_core$Volatility_W <- volatility(djia_core$Price, 5, calc = "close", N = avgNoSessions)
djia_core$Volatility_M <- volatility(djia_core$Price, 21, calc = "close", N = avgNoSessions)
djia_core$Volatility_Q <- volatility(djia_core$Price, 63, calc = "close", N = avgNoSessions)
djia_core$Volatility_Y <- volatility(djia_core$Price, n = avgNoSessions, calc = "close", N = avgNoSessions)
rm(noSessions,avgNoSessions)
# Weekday/ Month Identification ----
djia_core <- daysMonthsID(djia_core)
# RSI ----
djia_core$RSI_djia <- round(RSI(djia_core$Price, n = 21, maType="WMA"),2)
# EMA ----
djia_core$EMA_djia <- round(EMA(djia_core$Price, n = 21),2)
# SMA ----
djia_core$SMA_djia <- round(SMA(djia_core$Price, n = 21), 2)
# Returns structure between TPcand ----
djia_core <- returnStruct(djia_core)
# Returns chain distribution (mean) between TPcand ----
djia_core <- chainDistribution(djia_core)
# 5. High level features ------------------------------------------------
# Returns structure between TPcand and its identifier ----
djia_core <- returnStruct2(djia_core)
# Returns chain distribution (mean) between TPcand and its identifier ----
djia_core <- chainDistribution2(djia_core)
# 6. Cleaning data ------------------------------------------------------
gist <- djia_core[which(is.na(djia_core$Volume_spx) == FALSE)[1] : nrow(djia_core),]
gist <- gist %>% filter(TPcand == 1) %>% select(-c("Date", "ObsNo", "L1P", "L1T", "L2P",
"L2T", "L3P", "L3T", "IDObs", "TPcand",
"Weekday", "Month", "PosInaRow_TPcand",
"NegInaRow_TPcand", "GainInaRow_TPcand",
"LossInaRow_TPcand", "FDTR", "USGG10")) %>%
mutate(TPreal = factor(TPreal, levels = c(0,1), labels = c("False", "True")))
gist$CumVolROC_spx_TPcand[is.na(gist$CumVolROC_spx_TPcand)] <- 0
# 9. Simple Decision Tree---------------------------------------------------------------
# Data Splitting
set.seed(101)
trainIndex <- createDataPartition(gist$TPreal, p = 0.80, list = FALSE)
# Split with highly correlated predictors
trainingSDT <- gist[trainIndex, ]
testingSDT <- gist[-trainIndex, ]
# Model Training and Tuning
# Subsets validation
prop.table(table(trainingSDT$TPreal))
prop.table(table(testingSDT$TPreal))
# Fitting the model
set.seed(112)
rPartfit <- rpart(TPreal~., data = trainingSDT, method = 'class')
dev.new()
rpart.plot(rPartfit, extra = 106)
# Extracting Predictions
predict_unseen_Test <-predict(rPartfit, testingSDT, type = 'class')
confusionMatrix(data = predict_unseen_Test, testingSDT$TPreal)
predict_unseen_Train <-predict(rPartfit, trainingSDT, type = 'class')
confusionMatrix(data = predict_unseen_Train, trainingSDT$TPreal)
pred  <- prediction(as.numeric(testingSDT$TPreal), as.numeric(predict_unseen_Test))
roc   <- performance(pred, measure="tpr", x.measure="fpr")
auc = performance(pred, 'auc')
gauge_SDT <- slot(auc, 'y.values')
print(paste("AUC TEST set:", gauge_SDT))
pred2  <- prediction(as.numeric(trainingSDT$TPreal), as.numeric(predict_unseen_Train))
roc2   <- performance(pred2, measure="tpr", x.measure="fpr")
auc2 = performance(pred2, 'auc')
gauge_SDTcv <- slot(auc2, 'y.values')
print(paste("AUC TRAIN set:", gauge_SDTcv))
dev.new()
plot(roc, col="orange", lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="red", lwd=2)
trainingXGB <- gist[trainIndex, ]
testingXGB <- gist[-trainIndex, ]
ctrlXGB_cv <- trainControl(method = "cv",
number = 10,
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary)
ctrlXGB_loocv <- trainControl(method = "LOOCV",
classProbs = TRUE,
summaryFunction = twoClassSummary)
ctrlXGB_none <- trainControl(method = "none",
classProbs = TRUE,
summaryFunction = twoClassSummary)
set.seed(112)
xgbFit_cv <- train(TPreal~.,
data = trainingXGB,
method = "xgbTree",
trControl = ctrlXGB_cv,
metric = "ROC",
preProc = c("center", "scale"),
tuneGrid = xgbGrid)
xgbFit_loocv <- train(TPreal~.,
data = trainingXGB,
method = "xgbTree",
trControl = ctrlXGB_loocv,
metric = "ROC",
preProc = c("center", "scale"),
tuneGrid = xgbGrid)
xgbFit_none <- train(TPreal~.,
data = trainingXGB,
method = "xgbTree",
trControl = ctrlXGB_none,
tuneGrid = xgbGrid[nrow(xgbGrid),],
metric = "ROC",
preProc = c("center", "scale"))
xgbFit_cv
dev.new()
ggplot(xgbFit_cv)
xgbFit_loocv
dev.new()
ggplot(xgbFit_loocv)
xgbFit_none
dev.new()
ggplot(xgbFit_none)
xgbGrid <- expand.grid(nrounds = c(1, 10),
max_depth = c(1, 4),
eta = c(.1, .4),
gamma = 0,
colsample_bytree = .7,
min_child_weight = 1,
subsample = c(.8, 1))
trainingXGB <- gist[trainIndex, ]
testingXGB <- gist[-trainIndex, ]
ctrlXGB_cv <- trainControl(method = "cv",
number = 10,
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary)
ctrlXGB_loocv <- trainControl(method = "LOOCV",
classProbs = TRUE,
summaryFunction = twoClassSummary)
ctrlXGB_none <- trainControl(method = "none",
classProbs = TRUE,
summaryFunction = twoClassSummary)
set.seed(112)
xgbFit_cv <- train(TPreal~.,
data = trainingXGB,
method = "xgbTree",
trControl = ctrlXGB_cv,
metric = "ROC",
preProc = c("center", "scale"),
tuneGrid = xgbGrid)
xgbFit_loocv <- train(TPreal~.,
data = trainingXGB,
method = "xgbTree",
trControl = ctrlXGB_loocv,
metric = "ROC",
preProc = c("center", "scale"),
tuneGrid = xgbGrid)
xgbFit_none <- train(TPreal~.,
data = trainingXGB,
method = "xgbTree",
trControl = ctrlXGB_none,
tuneGrid = xgbGrid[nrow(xgbGrid),],
metric = "ROC",
preProc = c("center", "scale"))
xgbFit_cv
dev.new()
ggplot(xgbFit_cv)
xgbFit_loocv
dev.new()
ggplot(xgbFit_loocv)
xgbFit_none
dev.new()
ggplot(xgbFit_none)
xgbTPreal_cv <- predict.train(xgbFit_cv, newdata = testingXGB)
xgbTPreal_loocv <- predict.train(xgbFit_loocv, newdata = testingXGB)
xgbTPreal_none <- predict.train(xgbFit_none, newdata = testingXGB)
confusionMatrix(data = xgbTPreal_cv, testingXGB$TPreal)
confusionMatrix(data = xgbTPreal_loocv, testingXGB$TPreal)
confusionMatrix(data = xgbTPreal_none, testingXGB$TPreal)
xgbTPreal_cv.probs <- predict.train(xgbFit_cv, newdata = testingXGB, type = "prob")
xgbTPreal_loocv.probs <- predict.train(xgbFit_loocv, newdata = testingXGB, type = "prob")
xgbTPreal_none.probs <- predict.train(xgbFit_none, newdata = testingXGB, type = "prob")
xgbTPreal_cv.ROC <- roc(xgbTPreal_cv.probs$False,
response = testingXGB$TPreal,
levels=rev(levels(testingXGB$TPreal)))
xgbTPreal_loocv.ROC <- roc(xgbTPreal_loocv.probs$False,
response = testingXGB$TPreal,
levels=rev(levels(testingXGB$TPreal)))
xgbTPreal_none.ROC <- roc(xgbTPreal_none.probs$False,
response = testingXGB$TPreal,
levels=rev(levels(testingXGB$TPreal)))
gauge_XGB_cv <- xgbTPreal_cv.ROC$auc
gauge_XGB_cv
dev.new()
plot(xgbTPreal_cv.ROC, main = "xgboost ROC method: cv")
gauge_XGB_loocv <- xgbTPreal_loocv.ROC$auc
gauge_XGB_loocv
dev.new()
plot(xgbTPreal_loocv.ROC, main = "xgboost ROC method: LOOCV")
gauge_XGB_none <- xgbTPreal_none.ROC$auc
gauge_XGB_none
dev.new()
plot(xgbTPreal_none.ROC, main = "xgboost ROC method: none")
xgbTPreal_loocvtrain.probs <- predict.train(xgbFit_loocv, newdata = trainingXGB, type = "prob")
xgbTPreal_loocvtrain.ROC <- roc(xgbTPreal_loocvtrain.probs$False,
response = trainingXGB$TPreal,
levels=rev(levels(trainingXGB$TPreal)))
print(paste("ROC for predicitons on TEST subset:", xgbTPreal_loocv.ROC$auc))
print(paste("ROC for predicitons on TRAINING subset:", xgbTPreal_loocvtrain.ROC$auc))
set.seed(101)
trainIndex <- createDataPartition(gist$TPreal, p = 0.85, list = FALSE)
set.seed(101)
trainIndex <- createDataPartition(gist$TPreal, p = 0.85, list = FALSE)
trainingXGB <- gist[trainIndex, ]
testingXGB <- gist[-trainIndex, ]
# Tuning Grid
xgbGrid <- expand.grid(nrounds = c(1, 10),
max_depth = c(1, 4),
eta = c(.1, .4),
gamma = 0,
colsample_bytree = .7,
min_child_weight = 1,
subsample = c(.8, 1))
# Model Training and Tuning
ctrlXGB_cv <- trainControl(method = "cv",
number = 10,
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary)
ctrlXGB_loocv <- trainControl(method = "LOOCV",
classProbs = TRUE,
summaryFunction = twoClassSummary)
ctrlXGB_none <- trainControl(method = "none",
classProbs = TRUE,
summaryFunction = twoClassSummary)
set.seed(112)
xgbFit_cv <- train(TPreal~.,
data = trainingXGB,
method = "xgbTree",
trControl = ctrlXGB_cv,
metric = "ROC",
preProc = c("center", "scale"),
tuneGrid = xgbGrid)
xgbFit_loocv <- train(TPreal~.,
data = trainingXGB,
method = "xgbTree",
trControl = ctrlXGB_loocv,
metric = "ROC",
preProc = c("center", "scale"),
tuneGrid = xgbGrid)
xgbFit_none <- train(TPreal~.,
data = trainingXGB,
method = "xgbTree",
trControl = ctrlXGB_none,
tuneGrid = xgbGrid[nrow(xgbGrid),],
metric = "ROC",
preProc = c("center", "scale"))
xgbFit_cv
dev.new()
ggplot(xgbFit_cv)
xgbFit_loocv
dev.new()
ggplot(xgbFit_loocv)
# Extracting Predictions
xgbTPreal_cv <- predict.train(xgbFit_cv, newdata = testingXGB)
xgbTPreal_loocv <- predict.train(xgbFit_loocv, newdata = testingXGB)
xgbTPreal_none <- predict.train(xgbFit_none, newdata = testingXGB)
confusionMatrix(data = xgbTPreal_cv, testingXGB$TPreal)
confusionMatrix(data = xgbTPreal_loocv, testingXGB$TPreal)
confusionMatrix(data = xgbTPreal_none, testingXGB$TPreal)
xgbTPreal_cv.probs <- predict.train(xgbFit_cv, newdata = testingXGB, type = "prob")
xgbTPreal_loocv.probs <- predict.train(xgbFit_loocv, newdata = testingXGB, type = "prob")
xgbTPreal_none.probs <- predict.train(xgbFit_none, newdata = testingXGB, type = "prob")
xgbTPreal_cv.ROC <- roc(xgbTPreal_cv.probs$False,
response = testingXGB$TPreal,
levels=rev(levels(testingXGB$TPreal)))
xgbTPreal_loocv.ROC <- roc(xgbTPreal_loocv.probs$False,
response = testingXGB$TPreal,
levels=rev(levels(testingXGB$TPreal)))
xgbTPreal_none.ROC <- roc(xgbTPreal_none.probs$False,
response = testingXGB$TPreal,
levels=rev(levels(testingXGB$TPreal)))
gauge_XGB_cv <- xgbTPreal_cv.ROC$auc
gauge_XGB_cv
dev.new()
plot(xgbTPreal_cv.ROC, main = "xgboost ROC method: cv")
gauge_XGB_loocv <- xgbTPreal_loocv.ROC$auc
gauge_XGB_loocv
dev.new()
plot(xgbTPreal_loocv.ROC, main = "xgboost ROC method: LOOCV")
gauge_XGB_none <- xgbTPreal_none.ROC$auc
gauge_XGB_none
dev.new()
plot(xgbTPreal_none.ROC, main = "xgboost ROC method: none")
# ROC scores cross-validation
xgbTPreal_loocvtrain.probs <- predict.train(xgbFit_loocv, newdata = trainingXGB, type = "prob")
xgbTPreal_loocvtrain.ROC <- roc(xgbTPreal_loocvtrain.probs$False,
response = trainingXGB$TPreal,
levels=rev(levels(trainingXGB$TPreal)))
print(paste("ROC for predicitons on TEST subset:", xgbTPreal_loocv.ROC$auc))
print(paste("ROC for predicitons on TRAINING subset:", xgbTPreal_loocvtrain.ROC$auc))
xgbTPreal_loocvtrain.probs  <- predict.train(xgbFit_loocv, newdata = trainingXGB, type = "prob")
xgbTPreal_cvtrain.probs     <- predict.train(xgbFit_cv, newdata = trainingXGB, type = "prob")
xgbTPreal_loocvtrain.ROC  <- roc(xgbTPreal_loocvtrain.probs$False,
response = trainingXGB$TPreal,
levels=rev(levels(trainingXGB$TPreal)))
xgbTPreal_cvtrain.ROC     <- roc(xgbTPreal_cvtrain.probs$False,
response = trainingXGB$TPreal,
levels=rev(levels(trainingXGB$TPreal)))
print(paste("AUC for loocv on TEST subset:", xgbTPreal_loocv.ROC$auc))
print(paste("AUC for cv on TEST subset:", xgbTPreal_cv.ROC$auc))
print(paste("AUC for loocv on TRAINING subset:", xgbTPreal_loocvtrain.ROC$auc))
print(paste("AUC for cv on TRAINING subset:", xgbTPreal_cvtrain.ROC$auc))
pacman::p_load(pacman,tidyverse,stringr, forcats,readxl,TTR,quantmod,corrplot,
rpart,rpart.plot,lubridate,caret,e1071,xgboost,pROC,ROCR, grDevices)
source("mung.R")
source("eda.R")
# 2. Reading data ------------------------------------------
djia_core <- data.frame(read_excel("data/DJIA_PT.xlsx"))
spx500    <- data.frame(read_excel("data/SPX500_last_volume_daily.xlsx"))
cpi       <- data.frame(read_excel("data/CPI_yoy_mthly.xlsx"))
dvds      <- data.frame(read_excel("data/DIVIDENTS.xlsx"))
fdtr      <- data.frame(read_excel("data/FDTRMID.xlsx"))
ipmg      <- data.frame(read_excel("data/IPMGCHNG_mom_sa.xlsx"))
usgg10    <- data.frame(read_excel("data/USGG10yr.xlsx"))
usur      <- data.frame(read_excel("data/USURTOT_mthly.xlsx"))
colnames(spx500)  <- c("Date", "Price_spx", "Volume_spx")
colnames(cpi)     <- c("Date", "CPI")
colnames(dvds)    <- c("Date", "Net_dvds", "Gross_dvds" )
colnames(fdtr)    <- c("Date", "FDTR")
colnames(ipmg)    <- c("Date", "IPMG")
colnames(usgg10)  <- c("Date", "USGG10")
colnames(usur)    <- c("Date", "USUR")
spx500$Volume_spx[spx500$Volume_spx == 0] <- NA
# 3. Merging data -----------------------------------------
# Merging daily data ----
# SP500 ----
scanner(djia_core, spx500)
djia_core <- merge(djia_core, spx500, by = "Date", all.x = TRUE)
length(which(is.na(djia_core$Price_spx)))
#filling missing cells from "Price.spx" and "Volume.spx" columns with the average value of their closest neighbor cells
djia_core[which(is.na(djia_core$Price_spx)),c("Price_spx", "Volume_spx")] <-
(djia_core[which(is.na(djia_core$Price_spx))-1, c("Price_spx", "Volume_spx")] +
djia_core[which(is.na(djia_core$Price_spx))+1, c("Price_spx", "Volume_spx")])/2
length(which(is.na(djia_core$Price_spx)))
# FDTR ----
scanner(djia_core, fdtr)
djia_core <- merge(djia_core, fdtr, by = "Date", all.x = TRUE)
#tail(which(is.na(djia_core$FDTR)),200)
# DVDS ----
scanner(djia_core, dvds)
djia_core <- merge(djia_core, dvds, by = "Date", all.x = TRUE)
djia_core$Net_dvds <- NULL
length(which(is.na(djia_core$Gross_dvds)))
#filling missing "solitary" cells from "Gross_dvds" column with the average value of its closest neighbor cells
djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)],"Gross_dvds"] <-
(djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)]-1,"Gross_dvds"] +
djia_core[which(is.na(djia_core$Gross_dvds))[-(1:19)]+1, "Gross_dvds"])/2
length(which(is.na(djia_core$Gross_dvds)))
# USGG10 ----
scanner(djia_core, usgg10)
djia_core <- merge(djia_core, usgg10, by = "Date", all.x = TRUE)
length(which(is.na(djia_core$USGG10))[-(1:4108)])
#filling missing "solitary" cells from "USGG10" column with the average value of its closest neighbor cells
djia_core[which(is.na(djia_core$USGG10))[-(1:4108)],"USGG10"] <-
(djia_core[which(is.na(djia_core$USGG10))[-(1:4108)]-1,"USGG10"] +
djia_core[which(is.na(djia_core$USGG10))[-(1:4108)]+1, "USGG10"])/2
length(which(is.na(djia_core$USGG10))[-(1:4108)])
#filling the rest of missing cells with first previous available value
for(i in which(is.na(djia_core$USGG10))[-(1:4108)]){
djia_core[i,"USGG10"] <- djia_core[i-1,"USGG10"]
}
rm(i)
length(which(is.na(djia_core$USGG10))[-(1:4108)])
# Merging monthly data ----
# CPI ----
djia_core     <- merger(djia_core, cpi)
djia_core$CPI <- filler(djia_core$CPI)
djia_core$CPI  <- monthlyTrimmer(djia_core, cpi)
# USUR ----
djia_core       <- merger(djia_core, usur)
djia_core$USUR  <- filler(djia_core$USUR)
djia_core$USUR  <- monthlyTrimmer(djia_core, usur)
# IPMG ----
djia_core     <- merger(djia_core, ipmg)
djia_core$IPMG <- filler(djia_core$IPMG)
djia_core$IPMG  <- monthlyTrimmer(djia_core, ipmg)
rownames(djia_core) <- 1:nrow(djia_core)
# 4. Low level features -----------------------------------------------------
# Logarithmic returns ----
djia_core$lReturn_djia  <- round(ROC(djia_core$Price), 6)
djia_core$lReturn_spx   <- round(ROC(djia_core$Price_spx), 6)
cor(djia_core$lReturn_djia[-1], djia_core$lReturn_spx[-1])
# Rate of chance of trading volume ----
djia_core$ROC_vol_spx   <- round(ROC(djia_core$Volume_spx), 6)
# Volatility ----
noSessions <- as.numeric(table(year(djia_core$Date)))
avgNoSessions <- round(mean(noSessions[2:length(noSessions)]))
djia_core$Volatility_W <- volatility(djia_core$Price, 5, calc = "close", N = avgNoSessions)
djia_core$Volatility_M <- volatility(djia_core$Price, 21, calc = "close", N = avgNoSessions)
djia_core$Volatility_Q <- volatility(djia_core$Price, 63, calc = "close", N = avgNoSessions)
djia_core$Volatility_Y <- volatility(djia_core$Price, n = avgNoSessions, calc = "close", N = avgNoSessions)
rm(noSessions,avgNoSessions)
# Weekday/ Month Identification ----
djia_core <- daysMonthsID(djia_core)
# RSI ----
djia_core$RSI_djia <- round(RSI(djia_core$Price, n = 21, maType="WMA"),2)
# EMA ----
djia_core$EMA_djia <- round(EMA(djia_core$Price, n = 21),2)
# SMA ----
djia_core$SMA_djia <- round(SMA(djia_core$Price, n = 21), 2)
# Returns structure between TPcand ----
djia_core <- returnStruct(djia_core)
# Returns chain distribution (mean) between TPcand ----
djia_core <- chainDistribution(djia_core)
# 5. High level features ------------------------------------------------
# Returns structure between TPcand and its identifier ----
djia_core <- returnStruct2(djia_core)
# Returns chain distribution (mean) between TPcand and its identifier ----
djia_core <- chainDistribution2(djia_core)
# 6. Cleaning data ------------------------------------------------------
#gist <- djia_core[which(is.na(djia_core$Volume_spx) == FALSE)[1] : nrow(djia_core),]
gist <- djia_core %>% filter(TPcand == 1) %>% select(-c("Date", "ObsNo", "L1P", "L1T", "L2P",
"L2T", "L3P", "L3T", "IDObs", "TPcand",
"Weekday", "Month", "PosInaRow_TPcand",
"NegInaRow_TPcand", "GainInaRow_TPcand",
"LossInaRow_TPcand", "FDTR", "USGG10",
"Volume_spx", "ROC_vol_spx", "CumVolROC_spx_TPcand")) %>%
mutate(TPreal = factor(TPreal, levels = c(0,1), labels = c("False", "True")))
#filling NAs
usur_sampel <- numeric(4)
for(i in 1:4){
usur_sampel[i] <- mean(sample(gist$USUR[5:40], 5))
}
gist$USUR[1:4] <- usur_sampel
volatility_y_sample <- mean(gist$Volatility_Y[2:4])
gist$Volatility_Y[1] <- volatility_y_sample
rm(i, volatility_y_sample, usur_sampel)
#gist$CumVolROC_spx_TPcand[is.na(gist$CumVolROC_spx_TPcand)] <- 0
which(is.na(gist))
xgbTree(gist, proportion = 0.72, seed_split = 101, seed_train = 712)
